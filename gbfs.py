# -*- coding: utf-8 -*-
"""GBFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FWm_c9YYOtIQTuAXFFWCY2fBOV_Vk8xy
"""

from queue import PriorityQueue

class Node:
  def __init__(self, name, dist, h):
    self.name=name
    self.dist=dist
    self.h=h
    self.parent = None

adj=[]
def addEdge(u,v,dist,h):
  adj[u].append(Node(v,dist,h))


def GBFS(src, dest, h):
  pq= PriorityQueue() #openlist
  pp=[] #closedlist

  pq.put((h,Node(src,0,h)))

  while not pq.empty():
    explored = pq.get()
    pp.append(explored[1])
    if explored[1].name == dest:
      return pp
    for v in adj[explored[1].name]:
      for y in pp:
        if y == v:
          continue

      v.parent= explored[1]
      pq.put((v.h,v))

  print("No solution found")

def print_path(node):
    if node.parent:
        print_path(node.parent)
    print(node.name, end=" -> ")

V = 10
#Initializing the adjacency list
for i in range(V):
    adj.append([])

addEdge(0, 1, 2, 22)
addEdge(0, 2, 1, 21)
addEdge(0, 3, 10, 10)
addEdge(1, 4, 3, 25)
addEdge(1, 5, 2, 24)
addEdge(2, 6, 9, 30)
addEdge(3, 7, 5, 5)
addEdge(3, 8, 2, 12)
addEdge(7, 9, 5, 0)

# Defining the heuristic values for each node.
#h = [20, 22, 21, 10, 25, 24, 30, 5, 12, 0]
path = GBFS(0, 9, 20)

if path:
    print("Path found:")
    print_path(path[-1])
else:
    print("Path not found.")